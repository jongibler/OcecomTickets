@model OcecomTickets.Models.Ticket

@{
    ViewBag.Title = "Detalle Ticket";
}

<h2>Detalles del Ticket</h2>
<h3>Estatus: <b style="color:@Model.StatusColor;">@Model.Status</b></h3>
<h4>Cliente: <b>@Model.Client.ClientName</b></h4>
<h4>Contacto: <b>@Model.Client.ContactName - @Model.Client.Email</b></h4>
<h4>Teléfono Oficina: <b>@Model.Client.OfficePhone</b></h4>
@if (!String.IsNullOrWhiteSpace(Model.Client.MobilePhone))
{
    <h4>Teléfono Móvil: <b>@Model.Client.MobilePhone</b></h4>
}

<div>
    <hr />
    <dl class="dl-horizontal">
        <dt>Fecha de Creación</dt>
        <dd>@Html.DisplayFor(model => model.CreationDate)</dd>

        <dt>Severidad</dt>
        <dd>@Html.DisplayFor(model => model.FriendlySeverity)</dd>

        <dt>Categoría</dt>
        <dd>@Html.DisplayFor(model => model.Category)</dd>

        <dt>Nota</dt>
        <dd>@Html.DisplayFor(model => model.Note)</dd>

        @if (Model.Status == "En Progreso" || Model.Status == "Cerrado")
        {
            <dt>Horas Trabajadas</dt>
            <dd>@Model.TicketHourRecords.Sum(th => th.Hours) hrs</dd>
            if (Model.TicketHourRecords.Any())
            {
                var lastEmployee = Model.TicketHourRecords.OrderByDescending(th => th.Date).First().Employee;
                <dt>Atendió</dt>
                <dd>@lastEmployee.Name (@lastEmployee.MobilePhone)</dd>
            }
        }

        @if (Model.Status == "Cerrado")
        {
            <dt>Fecha de Cierre</dt>
            <dd>@Html.DisplayFor(model => model.ClosedDate)</dd>
            <dt>Cerrado Por</dt>
            <dd>@Html.DisplayFor(model => model.ClosedByUser)</dd>
            <dt>Solución</dt>
            <dd>@Html.DisplayFor(model => model.SolutionNote)</dd>
            <dt>Causa Raíz</dt>
            <dd>@Html.DisplayFor(model => model.RootCause)</dd>
        }

    </dl>
</div>

@if (User.IsInRole("Employee") || User.IsInRole("Admin"))
{
    <div>
        <h3>Horas Capturadas</h3>
        <hr />

        @if (Model.TicketHourRecords.Any())
        {
            <div class="table-container">
                <table class="table table-striped table-responsive">
                    <tr>
                        <th>Fecha</th>
                        <th>Horas</th>
                        <th>Capturado Por</th>
                        <th>Comentario</th>
                    </tr>
                    @foreach (var ticketHourRecord in Model.TicketHourRecords.OrderBy(th => th.Date))
                    {
                        <tr>
                            <td>@ticketHourRecord.Date.ToString("dd MMM")</td>
                            <td>@ticketHourRecord.Hours hrs</td>
                            <td>@ticketHourRecord.Employee.Name</td>
                            <td>@ticketHourRecord.Comment</td>
                        </tr>
                    }
                </table>
            </div>
        }
        else
        {
            <p><i>No se tienen horas capturadas.</i></p>
        }

        @if (Model.Status != "Cerrado" && User.IsInRole("Employee"))
        {
            <form action="/Tickets/CaptureHours/@Model.Id" method="post">
                <div class="form-group">
                    <label class="control-label col-md-2" for="hours">Horas a Capturar</label>
                    <div class="col-md-10">
                        <input class="form-control text-box single-line" id="hours" name="hours" type="number" />
                        <span id="hoursValidation" class="field-validation-valid text-danger"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2" for="comment">Comentario</label>
                    <div class="col-md-10">
                        <textarea class="form-control text-box multi-line" id="comment" name="comment" style="margin-top:10px;"></textarea>
                        <span id="commentValidation" class="field-validation-valid text-danger"></span>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10" style="margin-top:20px;">
                        <input type="submit" value="Capturar Horas" class="btn btn-default" onclick="return validateCaptureHours()" />
                    </div>
                </div>
            </form>
        }

    </div>
}

@if (Model.Status != "Cerrado")
{
    <div>
        <h3>Cerrar Ticket</h3>
        <hr />
        <form action="/Tickets/Close/@Model.Id" method="post">
            <div class="form-group">
                <label class="control-label col-md-2" for="solution">Solución</label>
                <div class="col-md-10">
                    <textarea class="form-control text-box multi-line" id="solution" name="solution"></textarea>
                    <span id="solutionValidation" class="field-validation-valid text-danger"></span>
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2" for="cause">Causa Raíz</label>
                <div class="col-md-10">
                    <textarea class="form-control text-box multi-line" id="cause" name="cause"  style="margin-top:10px;"></textarea>
                    <span id="causeValidation" class="field-validation-valid text-danger"></span>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10" style="margin-top:20px;">
                    <input type="submit" value="Cerrar Ticket" class="btn btn-default" onclick="return validateCloseTicket()" />
                </div>
            </div>
        </form>
    </div>
}

<p>
    @Html.ActionLink("Regresar al Listado", "Index")
</p>


<script>
    function validateCaptureHours() {
        var hoursText = $('#hours').val();
        if (!isWithinRange(hoursText, 1, 24)) {
            $('#hoursValidation').text('Entre 1 y 24 hrs');
            return false;
        }
        var commentText = $('#comment').val();
        if (isNullOrWhitespace(commentText)) {
            $('#commentValidation').text('Se debe incluir un comentario.');
            return false;
        }
        return true;
    }

    function validateCloseTicket() {
        var solutionText = $('#solution').val();
        var causeText = $('#cause').val();
        if (isNullOrWhitespace(solutionText)) {            
            $('#solutionValidation').text('Se debe especificar solución.');
            return false;
        }
        if (isNullOrWhitespace(causeText)) {
            $('#causeValidation').text('Se debe especificar la causa raíz.');
            return false;
        }
        return true;
    }

    function isNullOrWhitespace(input) {

        if (typeof input === 'undefined' || input == null) return true;

        return input.replace(/\s/g, '').length < 1;
    }

    function isWithinRange(value, min, max) {
        if (parseInt(value) < min || isNaN(parseInt(value)))
            return false;
        else if (parseInt(value) > max)
            return false;
        else return true;
    }
</script>
